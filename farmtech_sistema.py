#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Gerenciamento Agr√≠cola - FarmTech Solutions
Desenvolvido para suportar agricultura digital
Culturas suportadas: Caf√© e Milho
"""

import math
import os
import time

# ========================================
# VETORES GLOBAIS PARA ARMAZENAR OS DADOS
# ========================================
culturas = []           # Tipo de cultura (caf√© ou milho)
areas_plantio = []      # √Åreas calculadas em m¬≤
insumos_tipo = []       # Tipo de insumo usado
insumos_quantidade = [] # Quantidade total de insumo necess√°ria
datas_registro = []     # Data de registro dos dados

# ========================================
# FUN√á√ïES AUXILIARES
# ========================================

def limpar_tela():
    """Limpa a tela do terminal"""
    os.system('cls' if os.name == 'nt' else 'clear')

def pausar():
    """Pausa a execu√ß√£o esperando o usu√°rio pressionar Enter"""
    input("\nPressione ENTER para continuar...")

def validar_numero(mensagem, tipo=float, minimo=0):
    """
    Valida entrada num√©rica do usu√°rio
    
    Par√¢metros:
    - mensagem: texto a ser exibido
    - tipo: tipo de dado (int ou float)
    - minimo: valor m√≠nimo aceito
    """
    while True:
        try:
            valor = tipo(input(mensagem))
            if valor > minimo:
                return valor
            else:
                print(f"‚ùå Erro: O valor deve ser maior que {minimo}")
        except ValueError:
            print("‚ùå Erro: Digite um n√∫mero v√°lido!")

# ========================================
# FUN√á√ïES DE C√ÅLCULO
# ========================================

def calcular_area_retangular(comprimento, largura):
    """
    Calcula √°rea retangular (usado para caf√©)
    
    Par√¢metros:
    - comprimento: comprimento do talh√£o em metros
    - largura: largura do talh√£o em metros
    
    Retorna:
    - √°rea em metros quadrados
    """
    return comprimento * largura

def calcular_area_circular(raio):
    """
    Calcula √°rea circular (usado para milho - piv√¥ central)
    
    Par√¢metros:
    - raio: raio do piv√¥ em metros
    
    Retorna:
    - √°rea em metros quadrados
    """
    return math.pi * (raio ** 2)

def calcular_insumo_cafe(area, ml_por_metro, num_ruas, comprimento_rua):
    """
    Calcula quantidade de insumo para caf√©
    
    Par√¢metros:
    - area: √°rea total plantada em m¬≤
    - ml_por_metro: quantidade de produto em mL por metro linear
    - num_ruas: n√∫mero de ruas na lavoura
    - comprimento_rua: comprimento de cada rua em metros
    
    Retorna:
    - quantidade total de insumo em litros
    """
    # Calcula o total de metros lineares
    metros_lineares_total = num_ruas * comprimento_rua
    
    # Calcula quantidade em mL e converte para litros
    quantidade_ml = metros_lineares_total * ml_por_metro
    quantidade_litros = quantidade_ml / 1000
    
    return quantidade_litros

def calcular_insumo_milho(area, kg_por_hectare):
    """
    Calcula quantidade de insumo para milho
    
    Par√¢metros:
    - area: √°rea total plantada em m¬≤
    - kg_por_hectare: quantidade de produto em kg por hectare
    
    Retorna:
    - quantidade total de insumo em kg
    """
    # Converte √°rea de m¬≤ para hectares (1 hectare = 10.000 m¬≤)
    area_hectares = area / 10000
    
    # Calcula quantidade total
    quantidade_kg = area_hectares * kg_por_hectare
    
    return quantidade_kg

# ========================================
# FUN√á√ïES DO MENU PRINCIPAL
# ========================================

def entrada_dados():
    """Fun√ß√£o para entrada de novos dados no sistema"""
    limpar_tela()
    print("=" * 50)
    print("       ENTRADA DE DADOS - FARMTECH")
    print("=" * 50)
    
    # Escolha da cultura
    print("\nüìå TIPO DE CULTURA:")
    print("1 - Caf√© ‚òï")
    print("2 - Milho üåΩ")
    
    while True:
        escolha = input("\nEscolha a cultura (1 ou 2): ")
        if escolha in ['1', '2']:
            break
        print("‚ùå Op√ß√£o inv√°lida! Digite 1 ou 2.")
    
    if escolha == '1':
        # CAF√â - √Årea retangular
        print("\n‚òï CULTURA: CAF√â")
        print("-" * 30)
        
        culturas.append("Caf√©")
        
        # C√°lculo da √°rea
        print("\nüìê C√ÅLCULO DA √ÅREA (Formato Retangular)")
        comprimento = validar_numero("Digite o comprimento do talh√£o (metros): ")
        largura = validar_numero("Digite a largura do talh√£o (metros): ")
        area = calcular_area_retangular(comprimento, largura)
        areas_plantio.append(area)
        
        print(f"\n‚úÖ √Årea calculada: {area:,.2f} m¬≤")
        print(f"   Equivalente a: {area/10000:,.2f} hectares")
        
        # C√°lculo de insumos
        print("\nüíß C√ÅLCULO DE INSUMOS")
        print("Produtos dispon√≠veis:")
        print("1 - Fosfato")
        print("2 - Fungicida")
        print("3 - Herbicida")
        
        produto = input("Escolha o produto (1, 2 ou 3): ")
        produtos_nomes = {
            '1': 'Fosfato',
            '2': 'Fungicida', 
            '3': 'Herbicida'
        }
        nome_produto = produtos_nomes.get(produto, 'Fosfato')
        insumos_tipo.append(nome_produto)
        
        print(f"\nProduto selecionado: {nome_produto}")
        ml_por_metro = validar_numero("Quantidade em mL por metro linear: ")
        num_ruas = validar_numero("N√∫mero de ruas na lavoura: ", int)
        comprimento_rua = validar_numero("Comprimento m√©dio de cada rua (metros): ")
        
        quantidade = calcular_insumo_cafe(area, ml_por_metro, num_ruas, comprimento_rua)
        insumos_quantidade.append(quantidade)
        
        print(f"\n‚úÖ Quantidade necess√°ria: {quantidade:,.2f} litros")
        
    else:
        # MILHO - √Årea circular (piv√¥)
        print("\nüåΩ CULTURA: MILHO")
        print("-" * 30)
        
        culturas.append("Milho")
        
        # C√°lculo da √°rea
        print("\nüìê C√ÅLCULO DA √ÅREA (Piv√¥ Central Circular)")
        raio = validar_numero("Digite o raio do piv√¥ (metros): ")
        area = calcular_area_circular(raio)
        areas_plantio.append(area)
        
        print(f"\n‚úÖ √Årea calculada: {area:,.2f} m¬≤")
        print(f"   Equivalente a: {area/10000:,.2f} hectares")
        
        # C√°lculo de insumos
        print("\nüíß C√ÅLCULO DE INSUMOS")
        print("Produtos dispon√≠veis:")
        print("1 - Nitrog√™nio")
        print("2 - F√≥sforo")
        print("3 - Pot√°ssio")
        
        produto = input("Escolha o produto (1, 2 ou 3): ")
        produtos_nomes = {
            '1': 'Nitrog√™nio',
            '2': 'F√≥sforo',
            '3': 'Pot√°ssio'
        }
        nome_produto = produtos_nomes.get(produto, 'Nitrog√™nio')
        insumos_tipo.append(nome_produto)
        
        print(f"\nProduto selecionado: {nome_produto}")
        kg_por_hectare = validar_numero("Quantidade em kg por hectare: ")
        
        quantidade = calcular_insumo_milho(area, kg_por_hectare)
        insumos_quantidade.append(quantidade)
        
        print(f"\n‚úÖ Quantidade necess√°ria: {quantidade:,.2f} kg")
    
    # Adiciona data do registro
    from datetime import datetime
    datas_registro.append(datetime.now().strftime("%d/%m/%Y %H:%M"))
    
    print("\n‚úÖ Dados salvos com sucesso!")
    pausar()

def saida_dados():
    """Fun√ß√£o para exibir todos os dados cadastrados"""
    limpar_tela()
    print("=" * 50)
    print("       RELAT√ìRIO DE DADOS - FARMTECH")
    print("=" * 50)
    
    if len(culturas) == 0:
        print("\n‚ö†Ô∏è  Nenhum dado cadastrado no sistema!")
    else:
        print(f"\nüìä Total de registros: {len(culturas)}")
        print("-" * 50)
        
        # Loop para exibir cada registro
        for i in range(len(culturas)):
            print(f"\nüìå REGISTRO #{i+1}")
            print(f"   Data/Hora: {datas_registro[i]}")
            print(f"   Cultura: {culturas[i]}")
            print(f"   √Årea plantada: {areas_plantio[i]:,.2f} m¬≤")
            print(f"   Insumo: {insumos_tipo[i]}")
            
            # Unidade depende da cultura
            if culturas[i] == "Caf√©":
                print(f"   Quantidade: {insumos_quantidade[i]:,.2f} litros")
            else:
                print(f"   Quantidade: {insumos_quantidade[i]:,.2f} kg")
            print("-" * 50)
        
        # Estat√≠sticas gerais
        print("\nüìà ESTAT√çSTICAS GERAIS:")
        total_area = sum(areas_plantio)
        print(f"   √Årea total cultivada: {total_area:,.2f} m¬≤")
        print(f"   √Årea m√©dia por cultura: {total_area/len(areas_plantio):,.2f} m¬≤")
        
        # Contagem por tipo de cultura
        cafe_count = culturas.count("Caf√©")
        milho_count = culturas.count("Milho")
        print(f"   Registros de Caf√©: {cafe_count}")
        print(f"   Registros de Milho: {milho_count}")
    
    pausar()

def atualizar_dados():
    """Fun√ß√£o para atualizar dados em uma posi√ß√£o espec√≠fica"""
    limpar_tela()
    print("=" * 50)
    print("       ATUALIZA√á√ÉO DE DADOS - FARMTECH")
    print("=" * 50)
    
    if len(culturas) == 0:
        print("\n‚ö†Ô∏è  Nenhum dado para atualizar!")
        pausar()
        return
    
    # Mostra dados atuais
    print("\nüìã REGISTROS ATUAIS:")
    for i in range(len(culturas)):
        print(f"{i+1}. {culturas[i]} - √Årea: {areas_plantio[i]:,.2f} m¬≤ - Insumo: {insumos_tipo[i]}")
    
    # Solicita posi√ß√£o
    posicao = validar_numero(f"\nQual registro deseja atualizar (1 a {len(culturas)})? ", int, 0)
    
    # Valida posi√ß√£o
    if posicao < 1 or posicao > len(culturas):
        print("‚ùå Posi√ß√£o inv√°lida!")
        pausar()
        return
    
    # Ajusta para √≠ndice do vetor (come√ßa em 0)
    indice = posicao - 1
    
    print(f"\nüìù Atualizando registro #{posicao}")
    print("O que deseja atualizar?")
    print("1 - √Årea plantada")
    print("2 - Tipo de insumo")
    print("3 - Quantidade de insumo")
    print("4 - Todos os dados")
    
    opcao = input("\nEscolha uma op√ß√£o: ")
    
    if opcao in ['1', '4']:
        # Atualiza √°rea baseado no tipo de cultura
        if culturas[indice] == "Caf√©":
            print("\nüìê Nova √°rea (Ret√¢ngulo):")
            comprimento = validar_numero("Novo comprimento (metros): ")
            largura = validar_numero("Nova largura (metros): ")
            areas_plantio[indice] = calcular_area_retangular(comprimento, largura)
        else:
            print("\nüìê Nova √°rea (C√≠rculo):")
            raio = validar_numero("Novo raio do piv√¥ (metros): ")
            areas_plantio[indice] = calcular_area_circular(raio)
    
    if opcao in ['2', '4']:
        # Atualiza tipo de insumo
        if culturas[indice] == "Caf√©":
            print("\nüíß Novo insumo (1-Fosfato, 2-Fungicida, 3-Herbicida):")
            produto = input("Escolha: ")
            produtos_nomes = {'1': 'Fosfato', '2': 'Fungicida', '3': 'Herbicida'}
            insumos_tipo[indice] = produtos_nomes.get(produto, insumos_tipo[indice])
        else:
            print("\nüíß Novo insumo (1-Nitrog√™nio, 2-F√≥sforo, 3-Pot√°ssio):")
            produto = input("Escolha: ")
            produtos_nomes = {'1': 'Nitrog√™nio', '2': 'F√≥sforo', '3': 'Pot√°ssio'}
            insumos_tipo[indice] = produtos_nomes.get(produto, insumos_tipo[indice])
    
    if opcao in ['3', '4']:
        # Atualiza quantidade de insumo
        if culturas[indice] == "Caf√©":
            print("\nüíß Nova quantidade de insumo:")
            ml_por_metro = validar_numero("mL por metro linear: ")
            num_ruas = validar_numero("N√∫mero de ruas: ", int)
            comprimento_rua = validar_numero("Comprimento da rua (metros): ")
            insumos_quantidade[indice] = calcular_insumo_cafe(
                areas_plantio[indice], ml_por_metro, num_ruas, comprimento_rua
            )
        else:
            print("\nüíß Nova quantidade de insumo:")
            kg_por_hectare = validar_numero("kg por hectare: ")
            insumos_quantidade[indice] = calcular_insumo_milho(
                areas_plantio[indice], kg_por_hectare
            )
    
    # Atualiza data de modifica√ß√£o
    from datetime import datetime
    datas_registro[indice] = datetime.now().strftime("%d/%m/%Y %H:%M")
    
    print("\n‚úÖ Dados atualizados com sucesso!")
    pausar()

def deletar_dados():
    """Fun√ß√£o para deletar dados de uma posi√ß√£o espec√≠fica"""
    limpar_tela()
    print("=" * 50)
    print("       EXCLUS√ÉO DE DADOS - FARMTECH")
    print("=" * 50)
    
    if len(culturas) == 0:
        print("\n‚ö†Ô∏è  Nenhum dado para deletar!")
        pausar()
        return
    
    # Mostra dados atuais
    print("\nüìã REGISTROS ATUAIS:")
    for i in range(len(culturas)):
        print(f"{i+1}. {culturas[i]} - √Årea: {areas_plantio[i]:,.2f} m¬≤ - Insumo: {insumos_tipo[i]}")
    
    # Solicita posi√ß√£o
    posicao = validar_numero(f"\nQual registro deseja deletar (1 a {len(culturas)})? ", int, 0)
    
    # Valida posi√ß√£o
    if posicao < 1 or posicao > len(culturas):
        print("‚ùå Posi√ß√£o inv√°lida!")
        pausar()
        return
    
    # Ajusta para √≠ndice do vetor
    indice = posicao - 1
    
    # Confirma√ß√£o
    print(f"\n‚ö†Ô∏è  Confirma exclus√£o do registro #{posicao}?")
    print(f"   Cultura: {culturas[indice]}")
    print(f"   √Årea: {areas_plantio[indice]:,.2f} m¬≤")
    confirma = input("\nDigite S para confirmar ou N para cancelar: ").upper()
    
    if confirma == 'S':
        # Remove de todos os vetores
        culturas.pop(indice)
        areas_plantio.pop(indice)
        insumos_tipo.pop(indice)
        insumos_quantidade.pop(indice)
        datas_registro.pop(indice)
        
        print("\n‚úÖ Registro deletado com sucesso!")
    else:
        print("\n‚ùå Exclus√£o cancelada!")
    
    pausar()

def menu_principal():
    """Menu principal do sistema"""
    while True:
        limpar_tela()
        print("=" * 50)
        print("     üå± FARMTECH SOLUTIONS üå±")
        print("    Sistema de Agricultura Digital")
        print("=" * 50)
        print("\nüìã MENU PRINCIPAL:")
        print("\n1Ô∏è‚É£  - Entrada de Dados")
        print("2Ô∏è‚É£  - Sa√≠da de Dados (Relat√≥rio)")
        print("3Ô∏è‚É£  - Atualizar Dados")
        print("4Ô∏è‚É£  - Deletar Dados")
        print("5Ô∏è‚É£  - Sair do Programa")
        print("\n" + "=" * 50)
        
        opcao = input("\nEscolha uma op√ß√£o (1-5): ")
        
        # Estrutura de decis√£o para processar op√ß√£o
        if opcao == '1':
            entrada_dados()
        elif opcao == '2':
            saida_dados()
        elif opcao == '3':
            atualizar_dados()
        elif opcao == '4':
            deletar_dados()
        elif opcao == '5':
            limpar_tela()
            print("\n" + "=" * 50)
            print("    üëã Obrigado por usar FarmTech Solutions!")
            print("         Agricultura Digital √© o futuro! üöú")
            print("=" * 50)
            print("\nEncerrando sistema...")
            time.sleep(2)
            break
        else:
            print("\n‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a 5.")
            pausar()

# ========================================
# PROGRAMA PRINCIPAL
# ========================================

if __name__ == "__main__":
    # Inicia o sistema
    menu_principal()
